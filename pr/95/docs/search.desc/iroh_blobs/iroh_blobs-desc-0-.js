searchState.loadedDescShard("iroh_blobs", 0, "A format identifier\nThe hash for the empty byte range (<code>b&quot;&quot;</code>).\nHash type used throughout.\nA hash and format pair\nA sequence of BLAKE3 hashes\nRaw blob\nThe user facing API of the store.\nBytes of the hash.\nConvert to a hex string limited to the first 5bytes for a …\nDefines data formats for HashSeq.\nThe format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Hash</code> from its raw bytes representation.\nThe low level client side API\nThe hash\nCreate a new hash and format pair, using the collection …\nHelpers for blobs that contain a sequence of hashes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs hash seq format\nIs raw format\nAdaptation of <code>iroh-blobs</code> as an <code>iroh</code> <code>ProtocolHandler</code>.\nCalculate the hash of the provided bytes.\nCreate a new hash and format pair.\nProtocol for transferring content-addressed blobs over <code>iroh</code>…\nThe low level server side API\nCreate a new hash and format pair, using the default (raw) …\nStore implementations\nTickets for blobs.\nConvert the hash to a hex string.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nContains the error value\nContains the error value\nContains the error value\nRequest failed due an actual error.\nContains the success value\nContains the success value\nContains the success value\nRequest failed due to rpc error.\nThe main entry point for the store API.\nA named, persistent tag.\nAn ephemeral, in-memory tag that protects content while …\nCreate a new tag that does not exist yet.\nAPI to interact with a local blob store\nThe blobs API.\nConnect to a remote store as a rpc client.\nAPI for downloads from multiple nodes.\nCreate a downloader for more complex downloads.\nThe format of the pinned item\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hash of the pinned item\nThe hash and format of the pinned item\nThe hash of the pinned item\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeep the item alive until the end of the process\nThe empty temp tag. We don’t track the empty blob since …\nListen on a quinn endpoint for incoming rpc connections.\nCreate a new temp tag for the given hash and format\nIf this is a prefix, get the next prefix.\nAPI for downloading blobs from a single remote node.\nAPI for getting blobs from a <em>single</em> remote node.\nThe successor of this tag in lexicographic order.\nTags API\nThe tags API.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nOptions for adding bytes.\nOptions for adding data from a file system path.\nA progress handle for an import operation.\nProgress events for importing from any local source.\nA batch of operations that modify the blob store.\nA progress handle for a batch scoped add operation.\nThe state of a bitfield, or an update to a bitfield\nStatus information about a blob.\nBlobs API\nA progress handle for a blobs list operation.\nThe blob is stored completely.\nThis mode will copy the file into the database before …\nThis mode will copy the file to the target directory.\nThe copy part of the import operation is done.\nProgress copying the file into the data directory.\nProgress copying the file to the target directory.\nOptions for force deletion of blobs.\ndone, will be the last item\nThe import is done. Once you get this event the data is …\nThe export is done. Once you get this event the data is …\nA content item for the bao streaming protocol.\nan error, will be the last item\nThe import failed with an error. Partial data will be …\nThe export failed with an error.\nExport the given ranges in bao format, with the iroh block …\nA progress handle for a bao export operation.\nThe import mode describes how files will be imported.\nExport a file to a target path.\nA progress handle for an export operation.\nProgress events for exporting to a local file.\nExport the given ranges as chunkks, without validation.\nA progress handle for a bao export operation.\nA handle for an ongoing bao import operation.\nImport bao encoded data for the given hash with the iroh …\nThe import mode describes how files will be imported.\na leaf node\nThe blob is not stored at all.\nObserve the local bitfield of the given hash.\nAn observe result. Awaiting this will return the current …\nProgress computing the outboard and root hash of the …\na parent node\nThe blob is only stored partially.\ntotal data size, will be the first item\nSize of the file or stream has been determined.\nThe size of the file being exported.\nThis mode will try to reference the file in place and …\nThis mode will try to move the file to the target …\nCreate a complete bitfield for the given size\nConcatenate all the data into a single <code>Bytes</code>.\nA diff between two bitfields. This is an inverse of the …\nAn empty bitfield. This is the neutral element for the …\nExport a single chunk from the given hash, at the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the entire blob into a Bytes\nSame as <code>Self::hashes_with_index</code>, but without the indexes.\nInterprets this blob as a hash sequence and returns a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if all chunks up to size are included in the ranges\nTrue if the chunk corresponding to the size is included in …\nObserve the bitfield of the given hash.\nThe ranges that were added\nReturns an infinite stream of bitfields. The first …\nA raw stream of <code>ExportRangesItem</code>s.\nTotal valid bytes in this bitfield.\nUpdate the bitfield with a new value, and gives detailed …\nGet the validated size if the bitfield is validated\nThe size of the currently stored partial blob.\nThe size of the blob.\nTrait for pluggable content discovery strategies.\nType alias for WithChannels&lt;#inner_type, #service_name&gt;\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe inner message.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the parent span of the message\nThe request channel to receive the request from. Can be …\nThe current span where the full message was created.\nThe return channel to send the response to. Can be set to […\nNetwork or IO operation failed.\nThe request was completed.\nThe request was completed.\nThe request was closed, but not completed.\nThe request was closed, but not completed.\nFailures for a get operation\nTrait to lazily get a connection\nLocal info for a blob or hash sequence.\nProgress on the payload bytes read.\nProgress on the payload bytes read.\nAPI to compute request and to download from remote nodes.\nNumber of children in this hash sequence\nExecute a get request <em>without</em> taking the locally available …\nExecute a get request <em>without</em> taking the locally available …\nPush the given blob or hash sequence to a remote node.\nGet a blob or hash sequence from the given connection, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the data is complete.\nGet the local info for a given blob or hash sequence, at …\nThe number of bytes we have locally\nA request to get the missing data to complete this request\n<code>ToString::to_string</code>, but without panic on OOM.\nOptions for creating a tag\nOptions for a delete operation.\nOptions for a list operation.\nRename a tag atomically\nOptions for creating a tag or setting it to a new value.\nInformation about a tag.\nThe API for interacting with tags and temp tags.\nList all tags\nDeletes a tag.\nDelete all tags. Use with care. After this, all data will …\nDelete all tags with the given prefix.\nDeletes a range of tags.\nDeletes a tag.\nFormat of the data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOptional from tag (inclusive)\nOld tag name\nOptional from tag (inclusive)\nGet the value of a single tag\nHash of the data\nGet the hash and format of the tag.\nList hash seq tags\nList tags to hash seqs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists all tags.\nLists all tags with a hash_seq format.\nLists all tags with the given prefix.\nList a range of tags\nList all tags with options.\nName of the tag\nCreate a new tag info.\nList tags with a prefix\nDelete tags with a prefix\nList a range of tags\nDelete a range of tags\nList raw tags\nList tags to raw blobs\nRename a tag atomically\nRename a tag atomically\nList a single tag\nDelete a single tag\nOptional to tag (exclusive)\nNew tag name\nOptional to tag (exclusive)\nThe collection type used by iroh\nA collection of blobs\nThe header for the collection format.\nA simple store trait for loading blobs\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if this collection is empty\nIterate over the blobs in this collection\nGet the number of blobs in this collection\nLoad a blob from the store\nCreate a new collection from a hash sequence and metadata.\nAdd the given blob to the collection.\nRead the collection from a get fsm.\nRead the collection and all it’s children from a get fsm.\nStore a collection in a store. returns the root hash of …\nConvert the collection to an iterator of blobs, with the …\nOur download request is invalid.\nError when opening a stream\nError when decoding, e.g. hash mismatch\nContains the error value\nA generic error\nFailures for a get operation\nError when processing a response\nNetwork or IO operation failed.\nOperation failed on the local node.\nRemote behaved in a non-compliant way.\nHash not found, or a requested chunk for the hash not …\nContains the success value\nError when reading from the stream\nRemote has reset the connection.\nStats about the transfer.\nError when writing the handshake or request to the stream\nCounters\nThe time it took to transfer the data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFinite state machine for get responses.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransfer rate in megabits per second\nUtilities to generate or execute complex get requests …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nState while we are reading content\nState before reading a size header\nError that you can get from <code>AtBlobHeader::next</code>\nState when finishing the get response\nState of the get response machine after the handshake has …\nState after we have read all the content for a blob\nInitial state of the get response machine\nState of the get response when we start reading a child\nState of the get response when we start reading a …\nThe next state after reading a content item\nA chunk was not found or invalid, so the provider stopped …\nQuic connection is closed.\nRequest is empty\nNo more children expected\nPossible next states after the handshake has been sent\nError that you can get from <code>AtConnected::next</code>\nDecode error that you can get once you have sent the …\nA generic io error\nWe are done with this blob\nThe next state after the end of a blob\nQuinn read error when reading the size header\nA generic io error\nGeneric io error\nThe hash of a leaf did not match the expected hash\nA parent was not found or invalid, so the provider stopped …\nWe expect more content\nResponse is expected to have more children\nEof when reading the size header\nThe hash of a parent did not match the expected hash\nA parent was not found or invalid, so the provider stopped …\nError when serializing the request\nError when reading from the stream\nThe serialized request is too long to be sent\nFirst response is a child\nFirst response is either a collection or a single blob\nError when writing the request to the <code>SendStream</code>.\nConcatenate the entire response into a vec\nConcatenate the entire response into a vec\nDrain the response and throw away the result\nDrain the response and throw away the result\nFinish the get response without reading further\nFinish the get response without reading further\nImmediately finish the get response without reading further\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHash of the root blob\nThe hash of the blob we are reading.\nThe hash of the blob we are reading.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new get response\nInitiate a new bidi stream to use for the get response\nSend the request and move to the next state\nGo into the next state, reading the header\nGo into the next state, reading the header\nRead the size header, returning it and going into the …\nRead the next item, either content, an error, or the end …\nRead the next child, or finish\nFinish the get response, returning statistics\nThe offset of the child we are currently reading\nThe current offset of the blob we are reading.\nThe current offset of the blob we are reading.\nhash pair and size bytes read\nrequest, hash pair and size bytes written\npayload bytes read\npayload bytes written\nThe ranges we have requested for the child\nThe ranges we have requested for the child\nThe ranges we have requested for the current hash.\nThe entry point of the get response machine\nStart with a get many request. Todo: turn this into …\nCurrent stats\nThe geometry of the tree we are currently reading.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nWrite the entire blob to a slice writer.\nWrite the entire blob to a slice writer.\nWrite the entire blob to a slice writer and to an optional …\nWrite the entire blob to a slice writer and to an optional …\nRequest completed successfully\nRequest failed\nA single item in a <code>GetBlobResult</code>.\nResult of a <code>get_blob</code> request.\nContent\nReturns the argument unchanged.\nReturns the argument unchanged.\nProbe for a single chunk of a blob.\nGiven a hash of a hash seq, get the hash seq and the …\nGet the claimed size of a blob from a peer.\nGet the verified size of a blob from a peer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a sequence of sizes of children, generate a range …\nA sequence of links, backed by a <code>Bytes</code> object.\nIterator over the hashes in a <code>HashSeq</code>.\nStream over the hashes in a <code>HashSeq</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the hash at the given index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nGet the underlying bytes.\nCheck if this sequence is empty.\nIterate over the hashes in this sequence.\nGet the number of hashes in this sequence.\nCreate a new sequence of hashes.\nGet the next hash in the sequence.\nParse a sequence of hashes.\nGet and remove the first hash in this sequence.\nSkip a number of hashes in the sequence.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nA protocol handler for the blobs protocol.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a ticket for content on this node.\nThe ALPN used with quic for the iroh blobs protocol.\nA set of chunk ranges\nReasons to close connections or stop streams.\nA <code>RangeSpec</code> selecting nothing from the blob.\nA get request for a blob or collection\nGet multiple blobs in a single request, from a single …\nA GetMany request is a request to get multiple blobs via a …\nA get request\nMaximum message size is limited to 100MiB for now.\nAn iterator over blobs in the sequence with a non-empty …\nA request to observe a raw blob bitfield.\nThe provider is terminating.\nThe inverse of a get request - push data to the provider\nA push request contains a description of what to push, but …\nA chunk range specification as a sequence of chunk offsets.\nA request to the provider\nThe provider has received the request.\nThis must contain the request types in the same order as …\nThe <code>RecvStream</code> was dropped.\nUnknown error_code, can not be converted into <code>Closed</code>.\nA <code>ChunkRangesSeq</code> containing all chunks from all blobs.\nCreates a <code>RangeSpec</code> selecting the entire blob.\nRequest a collection and all its children\nIf this range seq describes a range for a single item, …\nRequest just a single blob\nRequest ranges from a single blob\nCreate a range of chunks that contains the given byte …\nCreate a chunk range that contains a single chunk.\nCreate a range of chunks from u64 chunk bounds.\nReturns the number of chunks selected by this <code>RangeSpec</code>, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience function to create a <code>ChunkRangesSeq</code> from an …\nConvenience function to create a <code>ChunkRangesSeq</code> from an …\nblake3 hash\nblake3 hash\nThe hashes of the blobs to get\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nChecks if this <code>ChunkRangesSeq</code> selects all chunks in the …\nChecks if this <code>RangeSpec</code> selects all chunks in the blob.\nChecks if this <code>ChunkRangesSeq</code> does not select any chunks …\nChecks if this <code>RangeSpec</code> does not select any chunks in the …\nTrue if this range spec sequence repeats the last range …\nAn iterator over blobs in the sequence with a non-empty …\nCreates a new <code>RangeSpec</code> from a range set.\nRequest a blob or collection with specified ranges\nCreate a chunk range that contains a single byte offset.\nThe range of data to request\nThe ranges of data to request\nranges to observe.\nThe close reason as bytes. This is a valid utf8 string …\nRequest just the first blob.\nCreates a <code>ChunkRanges</code> from this <code>RangeSpec</code>.\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\n<code>ToString::to_string</code>, but without panic on OOM.\nA <code>ChunkRangesSeq</code> getting the entire first blob and …\nA <code>ChunkRangesSeq</code> getting the verified size for the first …\nCreates a <code>RangeSpec</code> selecting the last chunk, which is …\nBuild a get request for the given hash, with the ranges …\nBuild a get request for the given hash, with the ranges …\nBuild a <code>GetManyRequest</code>.\nBuild a get request for the given hash, with the ranges …\nBuild a get request for the given hash, with the ranges …\nAdd a range to the request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSpecify ranges for the given hash.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecify ranges for the next offset.\nSpecify ranges for the next offset.\nAdd a range to the request.\nAdd a range to the request.\nSpecify ranges for the root blob (the HashSeq)\nA new client connected to the provider.\nConnection closed.\nProvider progress events, to keep track of what the …\nA sender for provider events.\nA new get request was received from the provider.\nA new get request was received from the provider.\nHelper to lazyly create an <code>Event</code>, in the case that the …\nWrapper for a <code>quinn::SendStream</code> with additional per …\nA new get request was received from the provider.\nEntire transfer aborted\nEntire transfer completed.\nProgress of the transfer.\nTransfer for the nth blob started.\nStatistics about a successful or failed transfer.\nSend a client connected event, if the progress sender is …\nAuthorize a push request.\nThe number of bytes read from the stream.\nThe number of bytes read from the stream\nThe connection ID from the connection\nTotal duration from reading the request to transfer …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle a single connection.\nHandle a single get request.\nHandle a single get request.\nHandle a single push request.\nHandle a single push request.\nThe quinn::SendStream to write to\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIncrease the write count due to a non-payload write.\nIncrease the write count due to a payload write, and …\nThe number of bytes sent that are not part of the payload.\nThe number of bytes written that are not part of the …\nThe number of bytes sent that are part of the payload.\nThe number of bytes written that are part of the payload\nThe progress sender to send events to\nRead the request from the getter.\nThe request ID from the recv stream\nSend a get request received event.\nSend a get request received event.\nSend a transfer started event.\nThe connection id. Multiple requests can be sent over the …\nThe connection id. Multiple requests can be sent over the …\nThe connection id. Multiple requests can be sent over the …\nThe connection id. Multiple requests can be sent over the …\nThe connection id. Multiple requests can be sent over the …\nThe connection id. Multiple requests can be sent over the …\nThe connection id. Multiple requests can be sent over the …\nThe end offset of the chunk that was sent.\nThe root hash of the request.\nThe root hash of the request.\nThe hash of the blob. This is the hash of the request for …\nThe root hash of the request.\nThe index of the blob in the request. 0 for the first blob …\nThe index of the blob in the request. 0 for the first blob …\nComplete this to permit the request.\nThe exact query ranges of the request.\nThe exact query ranges of the request.\nThe exact query ranges of the request.\nThe request id. There is a new id for each request.\nThe request id. There is a new id for each request.\nThe request id. There is a new id for each request.\nThe request id. There is a new id for each request.\nThe request id. There is a new id for each request.\nThe request id. There is a new id for each request.\nThe request id. There is a new id for each request.\nThe size of the blob. This is the full size of the blob, …\nStatistics about the transfer.\nStatistics about the part of the transfer that was aborted.\nBlock size used by iroh, 2^4*1024 = 16KiB\nFile based blob store.\nMutable in-memory blob store.\nReadonly in-memory store.\nA file based store.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad or create a new store.\nLoad or create a new store with custom options, returning …\nOptions for configuring the file store.\nAlways inline everything\nOptions for transaction batching.\nOptions for inlining small complete data or outboards.\nDo not inline anything, ever.\nOptions for the file store.\nOptions for directories used by the file store.\nTransaction batching options.\nPath to the directory where data and outboard files are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGc configuration.\nInline storage options.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum data size to inline.\nMaximum outboard size to inline.\nMaximum number of actor messages to batch before creating …\nMaximum duration to wait before committing a read …\nMaximum number of actor messages to batch before …\nMaximum duration to wait before committing a write …\nCreate new optinos with the given root path and everything …\nPath options.\nPath to the directory where temp files are stored. This …\nA cheaply cloneable handle to a bao file, including the …\nGet the bitfield of the storage.\nForward observed <em>values</em> to the given sender\nForward observed <em>deltas</em> to the given sender\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA token containing everything to get a file from the …\nThe <code>BlobFormat</code> for this ticket.\nReturns the argument unchanged.\nThe hash of the item this ticket can retrieve.\nCalls <code>U::from(self)</code>.\nGet the contents of the ticket, consuming it.\nCreates a new ticket.\nThe <code>NodeAddr</code> of the provider for this ticket.\nTrue if the ticket is for a collection and should retrieve …\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOur version of a sink, that can be mapped etc.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")