rd_("AjContains the success value00000AfFile based blob store.AaGc configuration.AbGet the stream id.0BiA local unique identifier for the stream.0CkThe request channel to receive the request from. Can be \xe2\x80\xa6AkOptional to tag (exclusive)lNew tag name1CnThe return channel to send the response to. Can be set to [\xe2\x80\xa6AhContains the error value00000BfA get request for a blob or collectionhRaw blobB`Request failed due to rpc error.AhA named, persistent tag.mList all tagsDcA <code>ChunkRangesSeq</code> containing all chunks from all blobs.CkCreates a <code>RangeSpec</code> selecting the entire blob.BiRequest a collection and all its childrenBaThe user facing API of the store.BgFinite state machine for get responses.AmThe low level client side APIAmGet the value of a single tagB`Get the hash at the given index.AfGet request event maskBjGet the number of blobs in this collectionBjGet the number of hashes in this sequence.AmMutable in-memory blob store.BiCalculate the hash of the provided bytes.BbCreate a new hash and format pair.CnCreate new optinos with the given root path and everything \xe2\x80\xa6CcCreate a new temp tag for the given hash and formatAfCreate a new tag info.AiCreate a new get responseB`Create a new sequence of hashes.CfCreates a new <code>RangeSpec</code> from a range set.CbRequest a blob or collection with specified rangesAeCreates a new ticket.CnCreate a new hash and format pair, using the default (raw) \xe2\x80\xa6mList raw tagsAfList tags to raw blobsCdThe ALPN used with quic for the iroh blobs protocol.CiThis mode will copy the file into the database before \xe2\x80\xa6CeThis mode will copy the file to the target directory.Akdone, will be the last itemCkThe import is done. Once you get this event the data is \xe2\x80\xa6CkThe export is done. Once you get this event the data is \xe2\x80\xa6AjThe request was completed.0AjWe are done with this blobAnRequest completed successfullyAjHash type used throughout.gContentka leaf nodeAfWe expect more contentC`A request tracker that doesn\xe2\x80\x99t track anything.CeWe don\xe2\x80\x99t get notification of connect events at all.0BeWe don\xe2\x80\x99t get request events at all.BkWe don\xe2\x80\x99t get these kinds of events at allChThe inverse of a get request - push data to the providerA`Generic io errorBbError when reading from the stream1Bgtotal data size, will be the first itemBoSize of the file or stream has been determined.BdThe size of the file being exported.C`The API for interacting with tags and temp tags.BiCreate a new tag that does not exist yet.AjRequest just a single blobCkA diff between two bitfields. This is an inverse of the \xe2\x80\xa6AoReturns the argument unchanged.0000000000000000000000000000000000000000000000000000000000000AmOptional from tag (inclusive)lOld tag name122222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222hThe hashAkThe hash of the pinned itemA`Hash of the dataAeHash of the root blobBdThe hash of the blob we are reading.0kblake3 hash0BbSpecify ranges for the given hash.BnThe hash of the item this ticket can retrieve.BaCalls <code>U::from(self)</code>.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BiIterate over the blobs in this collectionBiIterate over the hashes in this sequence.C`Keep the item alive until the end of the processoLists all tags.AjLoad a blob from the storeCjCreate a new collection from a hash sequence and metadata.AkLoad or create a new store.oName of the tagCfInitiate a new bidi stream to use for the get responseBkSend the request and move to the next stateBjGo into the next state, reading the header0CiRead the size header, returning it and going into the \xe2\x80\xa6ClRead the next item, either content, an error, or the end \xe2\x80\xa6AnRead the next child, or finishBmFinish the get response, returning statisticsBcSpecify ranges for the next offset.0mPath options.BeAdd the given blob to the collection.AgPush request event maskAlRequest just the first blob.BnSpecify ranges for the root blob (the HashSeq)BeSend that sends a fixed sized buffer.BnThe size of the currently stored partial blob.AeThe size of the blob.CnSize of the chunk to be throttled. This will usually be 16 \xe2\x80\xa6CdThe current span where the full message was created.BjStop the stream with the given error code.0ChSync the stream. Not needed for iroh, but needed for \xe2\x80\xa6hTags APImThe tags API.CbThe geometry of the tree we are currently reading.iUtilitiesBaAbort the garbage collection run.CaA batch of operations that modify the blob store.iBlobs APICoThe hash for the empty byte range (<code>b&quot;&quot;</code>).CiA <code>RangeSpec</code> selecting nothing from the blob.Aoan error, will be the last itemCiThe import failed with an error. Partial data will be \xe2\x80\xa6B`The export failed with an error.BjThe request was closed, but not completed.0nRequest failedBcRequest failed due an actual error.AiStats about the transfer.BgThe main entry point for the store API.CnError when writing the request to the <code>SendStream</code>.AbA generic io errorAmTransaction batching options.BgAPI to interact with a local blob storenThe blobs API.CkBuild a get request for the given hash, with the ranges \xe2\x80\xa60BdBuild a <code>GetManyRequest</code>.CiCreate a range of chunks that contains the given byte \xe2\x80\xa6AkAdd a range to the request.CbCreate a chunk range that contains a single chunk.BjClose an existing connection, if it existsBlDrain the response and throw away the result0CjAn empty bitfield. This is the neutral element for the \xe2\x80\xa6AbThe inner message.BaThe quinn::SendStream to write toClGet a mutable reference to the inner <code>AsyncRead</code>.CmGet a mutable reference to the inner <code>AsyncWrite</code>.ClGet the local info for a given blob or hash sequence, at \xe2\x80\xa6BdTransfer rate in megabits per secondAdList a range of tagsAfDelete a range of tagsBkReset the stream with the given error code.0BkThe entry point of the get response machinemCurrent statsAeStore implementationsCkStore a collection in a store. returns the root hash of \xe2\x80\xa6BmReasons to close connections or stop streams.BeThe header for the collection format.CgNewtype wrapper that wraps an event so that it is a \xe2\x80\xa6BiWe get a notification for connect events.0CkWe get a notification for each request, but no transfer \xe2\x80\xa6ma parent nodeCiAPI to compute request and to download from remote nodes.BoCreate a range of chunks from u64 chunk bounds.DiReturns the number of chunks selected by this <code>RangeSpec</code>, \xe2\x80\xa6nDeletes a tag.BoFinish the get response without reading further0CkImmediately finish the get response without reading furtherBaDefines data formats for HashSeq.jThe formatAmThe format of the pinned itemAbFormat of the dataBlThe <code>BlobFormat</code> for this ticket.DfSame as <code>Self::hashes_with_index</code>, but without the indexes.AnThe hashes of the blobs to getAgInline storage options.DhChecks if this <code>ChunkRangesSeq</code> selects all chunks in the \xe2\x80\xa6DeChecks if this <code>RangeSpec</code> selects all chunks in the blob.mIs raw formatChListen on a quinn endpoint for incoming rpc connections.C`The offset of the child we are currently readingBnThe current offset of the blob we are reading.0ChCreate a chunk range that contains a single byte offset.AkAdd a range to the request.0AgList tags with a prefixAiDelete tags with a prefixAjThe ranges that were addedBjThe ranges we have requested for the child0CbThe ranges we have requested for the current hash.AlThe range of data to requestAmThe ranges of data to requestAbranges to observe.CmCreate a reader for the given hash. The reader implements \xe2\x80\xa6CjThe close reason as bytes. This is a valid utf8 string \xe2\x80\xa6CdAPI for downloading blobs from a single remote node.CiAPI for getting blobs from a <em>single</em> remote node.AgRename a tag atomicallyAaList a single tagAcDelete a single tagCfReturns an infinite stream of bitfields. The first \xe2\x80\xa6BoA raw stream of <code>ExportRangesItem</code>s.AbTickets for blobs.BaConvert the hash to a hex string.ClUpdate the bitfield with a new value, and gives detailed \xe2\x80\xa6AgAborted end of transferA`Request is emptyAiNo more children expectedCmAll event notifications are fully disabled. Push requests \xe2\x80\xa6BeA client that does not send anything.AcA file based store.CiGet multiple blobs in a single request, from a single \xe2\x80\xa6AkA sequence of BLAKE3 hashesCkA sequence of links, backed by a <code>Bytes</code> object.AkOptions for the file store.BmConfiguration options for the connection poolBbThe blob is only stored partially.AiA request to the providerBmStart of transfer for a blob, mandatory eventAhInformation about a tag.CkAn ephemeral, in-memory tag that protects content while \xe2\x80\xa6AfTimeout during connectBjConnect to a remote store as a rpc client.BeThe time it took to transfer the dataCdForward observed <em>values</em> to the given senderCdHelpers for blobs that contain a sequence of hashes.CjA request to get the missing data to complete this requestBgObserve the bitfield of the given hash.AjObserve request event maskBgOptions for configuring the file store.CiUtilities to generate or execute complex get requests \xe2\x80\xa6kThe requestCjWait for the stream to be stopped, returning the error \xe2\x80\xa6CmWait for the stream to be stopped, returning the optional \xe2\x80\xa6BbLog request events at trace level.CcThe state of a bitfield, or an update to a bitfieldAnThe blob is stored completely.BiContinue with the garbage collection run.BnThe copy part of the import operation is done.CjThis request type is completely disabled. All requests \xe2\x80\xa6BeConfiguration for garbage collection.AlFailures for a get operationAnThe blob is not stored at all.B`Eof when reading the size headerBcProgress on the payload bytes read.0BdProgress for a blob - optional eventAlConnection pool is shut downBfThe connection pool has been shut downCcRequest to throttle sending for a specific request.ChRequest to throttle sending for a specific data request.AbBytes of the hash.B`Get the bitfield of the storage.BhNumber of children in this hash sequenceBmCreate a complete bitfield for the given sizehCountersCgTotal duration from reading the request to transfer \xe2\x80\xa6AkGet many request event maskCkCreate a new hash and format pair, using the collection \xe2\x80\xa6AbList hash seq tagsAfList tags to hash seqsBlInterval in which to run garbage collection.BaCheck if this collection is emptyB`Check if this sequence is empty.DiChecks if this <code>ChunkRangesSeq</code> does not select any chunks \xe2\x80\xa6DkChecks if this <code>RangeSpec</code> does not select any chunks in the \xe2\x80\xa6DkProtocol for transferring content-addressed blobs over <code>iroh</code>\xe2\x80\xa6AmThe low level server side APIBcRead the collection from a get fsm.Chthrottling is somewhat costly, so you can disable it \xe2\x80\xa6ClConvert the collection to an iterator of blobs, with the \xe2\x80\xa6BeState when finishing the get responseCcState after we have read all the content for a blobBiInitial state of the get response machineAjSuccessful end of transferCjError code for when a request is aborted due to a rate \xe2\x80\xa6CnEvent mask to configure which events are sent to the event \xe2\x80\xa6CfWe get a request for connect events and can reject \xe2\x80\xa60CnWe get a request for each request, and can reject incoming \xe2\x80\xa6CgWe call throttle to give the event handler a way to \xe2\x80\xa6BgLocal info for a blob or hash sequence.AmDo not inline anything, ever.CnWe get a notification for each request as well as detailed \xe2\x80\xa6BlThe type of the garbage collection callback.CkA chunk range specification as a sequence of chunk offsets.CfFirst response is either a collection or a single blobCjIf this range seq describes a range for a single item, \xe2\x80\xa6AeConnection event maskCkPath to the directory where data and outboard files are \xe2\x80\xa6CmConvert to a hex string limited to the first 5bytes for a \xe2\x80\xa6B`Get the entire blob into a BytesCjThe <code>NodeAddr</code> of the provider for this ticket.BoGet and remove the first hash in this sequence.CnTrue if the ticket is for a collection and should retrieve \xe2\x80\xa6CaThe successor of this tag in lexicographic order.CkPath to the directory where temp files are stored. This \xe2\x80\xa6BnWaits for the store to become completely idle.BhWrite the entire blob to a slice writer.0AcA format identifierEeA reader for blobs that implements <code>AsyncRead</code> and <code>AsyncSeek</code>.B`Status information about a blob.ChA token containing everything to get a file from the \xe2\x80\xa6AeA collection of blobsAoNetwork or IO operation failed.CeThe import mode describes how files will be imported.mA get request1ClThe request was aborted because the client does not have \xe2\x80\xa6CdAn abstract <code>iroh::endpoint::RecvStream</code>.CdAn abstract <code>iroh::endpoint::SendStream</code>.ChOptions for creating a tag or setting it to a new value.AiFirst response is a childEaA pair of <code>SendStream</code> and <code>RecvStream</code> with additional \xe2\x80\xa6CkBuild a get request for the given hash, with the ranges \xe2\x80\xa60B`The collection type used by irohCmDelete all tags. Use with care. After this, all data will \xe2\x80\xa6BfAPI for downloads from multiple nodes.BoCreate a downloader for more complex downloads.BjThe end offset of the chunk that was sent.CmCreate a <code>Hash</code> from its raw bytes representation.AiGet the underlying bytes.BmGet the contents of the ticket, consuming it.jiroh-blobsAdList a range of tagsDiReceive up to <code>len</code> bytes from the stream, directly into a \xe2\x80\xa6D`Receive exactly <code>target.len()</code> bytes from the stream.CcThe request id. There is a new id for each request.0DjSend bytes to the stream. This takes a <code>Bytes</code> because iroh \xe2\x80\xa6BjA progress handle for an import operation.CmState of the get response machine after the handshake has \xe2\x80\xa6CeState of the get response when we start reading a \xe2\x80\xa6AeA set of chunk rangesAhMode for connect events.ChDecode error that you can get once you have sent the \xe2\x80\xa6CmType alias for WithChannels&lt;#inner_type, #service_name&gt;BnA content item for the bao streaming protocol.BfThe next state after the end of a blobBnA single item in a <code>GetBlobResult</code>.CcIterator over the hashes in a <code>HashSeq</code>.AmOptions for a list operation.BbRequest mode for observe requests.BoOptions for directories used by the file store.BbError when serializing the requestCnA push request contains a description of what to push, but \xe2\x80\xa6ClThe request was aborted because a limit was exceeded. It \xe2\x80\xa6BkRequest mode for all data related requests.ClThis must contain the request types in the same order as \xe2\x80\xa6BfA simple store trait for loading blobsBaRequest ranges from a single blobCjConcatenate all the data into a single <code>Bytes</code>.DhConvenience function to create a <code>ChunkRangesSeq</code> from an \xe2\x80\xa6CjWe are done with reading. Return a ProgressWriter that \xe2\x80\xa6ChTrue if all chunks up to size are included in the rangesAmTrue if the data is complete.AbIs hash seq formatCkTrue if this range spec sequence repeats the last range \xe2\x80\xa6BeLists all tags with the given prefix.BcThe number of bytes we have locallyBiIf this is a prefix, get the next prefix.BbGet the parent span of the messageBcTotal valid bytes in this bitfield.ClAll event notifications for read-only requests are fully \xe2\x80\xa6BbState before reading a size headerCgState of the get response when we start reading a childBaOptions for transaction batching.AdError during connectCbProgress copying the file into the data directory.CbProgress copying the file to the target directory.ClError code for when a request is aborted due to internal \xe2\x80\xa6BlDescribes how to handle errors for a stream.AlFailures for a get operationCnWe get a request for each request, and can reject incoming \xe2\x80\xa6CnA parent was not found or invalid, so the provider stopped \xe2\x80\xa6BjResponse is expected to have more childrenCeThrottling mode for requests that support throttling.CiThis mode will try to reference the file in place and \xe2\x80\xa6CeThis mode will try to move the file to the target \xe2\x80\xa6AhDeletes a range of tags.CkExport a single chunk from the given hash, at the given \xe2\x80\xa6BiHow long to keep idle connections around.CnTrue if the chunk corresponding to the size is included in \xe2\x80\xa6CiAn optional callback that can be used to wait for the \xe2\x80\xa6CkRead the collection and all it\xe2\x80\x99s children from a get fsm.AaRead the request.AiReadonly in-memory store.AhAlways inline everythingBbState while we are reading contentCkA cheaply cloneable handle to a bao file, including the \xe2\x80\xa6BjA protocol handler for the blobs protocol.CmA chunk was not found or invalid, so the provider stopped \xe2\x80\xa6CfPossible next states after the handshake has been sentCmA reference to a connection that is owned by a connection \xe2\x80\xa6AjOptions for creating a tagBdOptions for force deletion of blobs.AoOptions for a delete operation.AoExport a file to a target path.BjResult of a <code>get_blob</code> request.AfA hash and format pairCfOptions for inlining small complete data or outboards.CdErrors that can occur when sending progress updates.CgOptions for an async reader for blobs that supports \xe2\x80\xa6AgRename a tag atomicallyBmThe serialized request is too long to be sentBfStream of updates for a single requestBhThe <code>RecvStream</code> was dropped.CaStatistics about a successful or failed transfer.CbOptional callback to manually add protected blobs.CmThe connection id. Multiple requests can be sent over the \xe2\x80\xa60BfDelete all tags with the given prefix.CdForward observed <em>deltas</em> to the given senderDiConvert an iterator of anything into <code>FallibleIterator</code> by \xe2\x80\xa60CmThe empty temp tag. We don\xe2\x80\x99t track the empty blob since \xe2\x80\xa6BfLists all tags with a hash_seq format.Ck<code>ToString::to_string</code>, but without panic on OOM.0000000000000000000000DiA <code>ChunkRangesSeq</code> getting the verified size for the first \xe2\x80\xa6DgCreates a <code>RangeSpec</code> selecting the last chunk, which is \xe2\x80\xa6C`Options for adding data from a file system path.AaA connection poolBaError code for a permission errorBjA progress handle for an export operation.CnA GetMany request is a request to get multiple blobs via a \xe2\x80\xa6BmObserve the local bitfield of the given hash.BiA request to observe a raw blob bitfield.B`Error during on_connect callbackCnA parent was not found or invalid, so the provider stopped \xe2\x80\xa6DdWrapper for a <code>quinn::SendStream</code> with additional per \xe2\x80\xa6BeReturned from <code>ProtectCb</code>.CjReturns either a fresh connection or a reference to an \xe2\x80\xa6AkList all tags with options.CmLoad or create a new store with custom options, returning \xe2\x80\xa6CmMaximum number of actor messages to batch before creating \xe2\x80\xa6CgStart with a get many request. Todo: turn this into \xe2\x80\xa6CcGet the validated size if the bitfield is validatedAiOptions for adding bytes.CdProgress events for importing from any local source.BkThe next state after reading a content itemBgA new client connected to the provider.BiBlock size used by iroh, 2^4*1024 = 16KiBBmA handle for an ongoing bao import operation.ClAn observe result. Awaiting this will return the current \xe2\x80\xa6BkMessage enum for <code>ProviderProto</code>BfThe provider has received the request.CaA new get request was received from the provider.ChTimeout for connect. This includes the time spent in \xe2\x80\xa6AmA simple iroh connection poolBcProbe for a single chunk of a blob.BfThe hash and format of the pinned itemBcGet the hash and format of the tag.BjMaximum number of connections to hand out.CdMaximum number of actor messages to batch before \xe2\x80\xa6DdCreates a <code>ChunkRanges</code> from this <code>RangeSpec</code>.CcA progress handle for a batch scoped add operation.BhA client disconnected from the provider.CaTrait for pluggable content discovery strategies.CnExport the given ranges in bao format, with the iroh block \xe2\x80\xa6ClImport bao encoded data for the given hash with the iroh \xe2\x80\xa6CjError that you can get from <code>AtConnected::next</code>CbThe hash of a leaf did not match the expected hashCbMaximum message size is limited to 100MiB for now.ChProgress computing the outboard and root hash of the \xe2\x80\xa6BkError when a connection can not be acquiredDbUnknown error_code, can not be converted into <code>Closed</code>.B`A new client has been connected.ClDeletes a tag, with full control over options. All other \xe2\x80\xa6AlMaximum data size to inline.Amhash pair and size bytes readBiThe number of bytes read from the stream.CjThe number of bytes sent that are not part of the payload.CeCreate a reader for the given options. The reader \xe2\x80\xa6DkReceive exactly <code>len</code> bytes from the stream, directly into a \xe2\x80\xa6AgRename a tag atomicallyCbTransfer aborted for the previously reported blob.DoTransfer for index <code>index</code> started, size <code>size</code> in bytes.BmA progress handle for a blobs list operation.BmA progress handle for a bao export operation.AmA connection has been closed.BlGet the verified size of a blob from a peer.AkHandle a single connection.CiInterprets this blob as a hash sequence and returns a \xe2\x80\xa6CeMaximum duration to wait before committing a read \xe2\x80\xa6CgTransfer progress for the previously reported blob, \xe2\x80\xa6AmSet the on_connected callbackCkError that you can get from <code>AtBlobHeader::next</code>CjError that you can get from <code>AtConnected::next</code>BnProgress events for exporting to a local file.CaA new get request was received from the provider.CdThe hash of a parent did not match the expected hashAdToo many connectionsCfMaximum duration to wait before committing a write \xe2\x80\xa6Abpayload bytes readCfThe number of bytes sent that are part of the payload.CdTransfer completed for the previously reported blob.CkError when calling a fn on the <code>ConnectionPool</code>.CgExport the given ranges as chunkks, without validation.AlThe provider is terminating.CbA new push request was received from the provider.BkGet the claimed size of a blob from a peer.Birequest, hash pair and size bytes writtenCfUtility to convert a tokio::io::AsyncWrite into an \xe2\x80\xa6BmA progress handle for a bao export operation.BjConcatenate the entire response into a vec0DhConvenience function to create a <code>ChunkRangesSeq</code> from an \xe2\x80\xa6B`Maximum outboard size to inline.DcA <code>ChunkRangesSeq</code> getting the entire first blob and \xe2\x80\xa6CkError that you can get from <code>AtBlobHeader::next</code>CgA new client connected to the provider. Notify variant.DgExecute a get request <em>without</em> taking the locally available \xe2\x80\xa6Aepayload bytes writtenCfA new get many request was received from the provider.CeA new observe request was received from the provider.ChGiven a hash of a hash seq, get the hash seq and the \xe2\x80\xa6CkGiven a sequence of sizes of children, generate a range \xe2\x80\xa6CkAn iterator over blobs in the sequence with a non-empty \xe2\x80\xa6EeConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by \xe2\x80\xa60CnWrite the entire blob to a slice writer and to an optional \xe2\x80\xa60DiThis is a helper trait to work with <code>AsyncReadRecvStream</code>. \xe2\x80\xa6ClA new get request was received from the provider (notify \xe2\x80\xa6DfThis is a helper trait to work with <code>AsyncWriteSendStream</code>.CmA new push request was received from the provider (notify \xe2\x80\xa6CiA new get many request was received from the provider \xe2\x80\xa67ChA new observe request was received from the provider \xe2\x80\xa6")